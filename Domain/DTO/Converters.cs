//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Data Transfer Object template.
// Code is generated on: 1/3/2024 16:43:22
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;

namespace Domain
{

    public static partial class ClientesConverter
    {

        public static ClientesDTO ToDto(this Clientes source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ClientesDTO ToDtoWithRelated(this Clientes source, int level)
        {
            if (source == null)
              return null;

            var target = new ClientesDTO();

            // Properties
            target.Id = source.Id;
            target.Nombre = source.Nombre;
            target.Apellido = source.Apellido;
            target.Email = source.Email;
            target.Telefono = source.Telefono;
            target.Observaciones = source.Observaciones;
            target.FechaAlta = source.FechaAlta;
            target.Activo = source.Activo;
            target.IdTelefonoTipo = source.IdTelefonoTipo;

            // Navigation Properties
            if (level > 0) {
              target.Usuario = source.Usuario.ToDtoWithRelated(level - 1);
              target.Turnos = source.Turnos.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Clientes ToEntity(this ClientesDTO source)
        {
            if (source == null)
              return null;

            var target = new Clientes();

            // Properties
            target.Id = source.Id;
            target.Nombre = source.Nombre;
            target.Apellido = source.Apellido;
            target.Email = source.Email;
            target.Telefono = source.Telefono;
            target.Observaciones = source.Observaciones;
            target.FechaAlta = source.FechaAlta;
            target.Activo = source.Activo;
            target.IdTelefonoTipo = source.IdTelefonoTipo;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ClientesDTO> ToDtos(this IEnumerable<Clientes> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ClientesDTO> ToDtosWithRelated(this IEnumerable<Clientes> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Clientes> ToEntities(this IEnumerable<ClientesDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Clientes source, ClientesDTO target);

        static partial void OnEntityCreating(ClientesDTO source, Clientes target);

    }

    public static partial class FechaTurnosConverter
    {

        public static FechaTurnosDTO ToDto(this FechaTurnos source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static FechaTurnosDTO ToDtoWithRelated(this FechaTurnos source, int level)
        {
            if (source == null)
              return null;

            var target = new FechaTurnosDTO();

            // Properties
            target.Id = source.Id;
            target.FechaTurno = source.FechaTurno;

            // Navigation Properties
            if (level > 0) {
              target.Turnos = source.Turnos.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static FechaTurnos ToEntity(this FechaTurnosDTO source)
        {
            if (source == null)
              return null;

            var target = new FechaTurnos();

            // Properties
            target.Id = source.Id;
            target.FechaTurno = source.FechaTurno;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<FechaTurnosDTO> ToDtos(this IEnumerable<FechaTurnos> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<FechaTurnosDTO> ToDtosWithRelated(this IEnumerable<FechaTurnos> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<FechaTurnos> ToEntities(this IEnumerable<FechaTurnosDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(FechaTurnos source, FechaTurnosDTO target);

        static partial void OnEntityCreating(FechaTurnosDTO source, FechaTurnos target);

    }

    public static partial class ModuloConverter
    {

        public static ModuloDTO ToDto(this Modulo source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static ModuloDTO ToDtoWithRelated(this Modulo source, int level)
        {
            if (source == null)
              return null;

            var target = new ModuloDTO();

            // Properties
            target.Id = source.Id;
            target.Icon = source.Icon;
            target.NodoPadre = source.NodoPadre;
            target.Nodo = source.Nodo;
            target.Descripcion = source.Descripcion;
            target.Url = source.Url;
            target.Orden = source.Orden;

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Modulo ToEntity(this ModuloDTO source)
        {
            if (source == null)
              return null;

            var target = new Modulo();

            // Properties
            target.Id = source.Id;
            target.Icon = source.Icon;
            target.NodoPadre = source.NodoPadre;
            target.Nodo = source.Nodo;
            target.Descripcion = source.Descripcion;
            target.Url = source.Url;
            target.Orden = source.Orden;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<ModuloDTO> ToDtos(this IEnumerable<Modulo> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<ModuloDTO> ToDtosWithRelated(this IEnumerable<Modulo> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Modulo> ToEntities(this IEnumerable<ModuloDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Modulo source, ModuloDTO target);

        static partial void OnEntityCreating(ModuloDTO source, Modulo target);

    }

    public static partial class TurnosConverter
    {

        public static TurnosDTO ToDto(this Turnos source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static TurnosDTO ToDtoWithRelated(this Turnos source, int level)
        {
            if (source == null)
              return null;

            var target = new TurnosDTO();

            // Properties
            target.Id = source.Id;
            target.Nombre = source.Nombre;
            target.Apellido = source.Apellido;
            target.NroTelefono = source.NroTelefono;
            target.Diseño = source.Diseño;

            // Navigation Properties
            if (level > 0) {
              target.Clientes = source.Clientes.ToDtoWithRelated(level - 1);
              target.FechaTurnos = source.FechaTurnos.ToDtoWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Turnos ToEntity(this TurnosDTO source)
        {
            if (source == null)
              return null;

            var target = new Turnos();

            // Properties
            target.Id = source.Id;
            target.Nombre = source.Nombre;
            target.Apellido = source.Apellido;
            target.NroTelefono = source.NroTelefono;
            target.Diseño = source.Diseño;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<TurnosDTO> ToDtos(this IEnumerable<Turnos> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<TurnosDTO> ToDtosWithRelated(this IEnumerable<Turnos> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Turnos> ToEntities(this IEnumerable<TurnosDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Turnos source, TurnosDTO target);

        static partial void OnEntityCreating(TurnosDTO source, Turnos target);

    }

    public static partial class UsuarioConverter
    {

        public static UsuarioDTO ToDto(this Usuario source)
        {
            return source.ToDtoWithRelated(0);
        }

        public static UsuarioDTO ToDtoWithRelated(this Usuario source, int level)
        {
            if (source == null)
              return null;

            var target = new UsuarioDTO();

            // Properties
            target.Id = source.Id;
            target.Username = source.Username;
            target.Password = source.Password;
            target.Nombre = source.Nombre;
            target.Apellido = source.Apellido;
            target.Telefono = source.Telefono;
            target.Email = source.Email;
            target.Confirmacion = source.Confirmacion;
            target.Eliminado = source.Eliminado;
            target.Activo = source.Activo;
            target.PrimerIngreso = source.PrimerIngreso;
            target.UltimoIngreso = source.UltimoIngreso;
            target.IngresoActual = source.IngresoActual;

            // Navigation Properties
            if (level > 0) {
              target.Clientes = source.Clientes.ToDtosWithRelated(level - 1);
            }

            // User-defined partial method
            OnDtoCreating(source, target);

            return target;
        }

        public static Usuario ToEntity(this UsuarioDTO source)
        {
            if (source == null)
              return null;

            var target = new Usuario();

            // Properties
            target.Id = source.Id;
            target.Username = source.Username;
            target.Password = source.Password;
            target.Nombre = source.Nombre;
            target.Apellido = source.Apellido;
            target.Telefono = source.Telefono;
            target.Email = source.Email;
            target.Confirmacion = source.Confirmacion;
            target.Eliminado = source.Eliminado;
            target.Activo = source.Activo;
            target.PrimerIngreso = source.PrimerIngreso;
            target.UltimoIngreso = source.UltimoIngreso;
            target.IngresoActual = source.IngresoActual;

            // User-defined partial method
            OnEntityCreating(source, target);

            return target;
        }

        public static List<UsuarioDTO> ToDtos(this IEnumerable<Usuario> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDto())
              .ToList();

            return target;
        }

        public static List<UsuarioDTO> ToDtosWithRelated(this IEnumerable<Usuario> source, int level)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToDtoWithRelated(level))
              .ToList();

            return target;
        }

        public static List<Usuario> ToEntities(this IEnumerable<UsuarioDTO> source)
        {
            if (source == null)
              return null;

            var target = source
              .Select(src => src.ToEntity())
              .ToList();

            return target;
        }

        static partial void OnDtoCreating(Usuario source, UsuarioDTO target);

        static partial void OnEntityCreating(UsuarioDTO source, Usuario target);

    }

}
